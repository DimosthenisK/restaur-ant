datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/dto"
  outputToNestJsResourceStructure = "true"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
}

enum Role {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum RestaurantStatus {
  ACTIVE
  INACTIVE
}

enum ReviewStatus {
  UNPUBLISHED
  DELETED
  PUBLISHED
}

model User {
  // @DtoReadOnly
  id        String     @id @default(uuid()) @db.Uuid()
  // @DtoUpdateOptional
  name      String     @db.VarChar(255)
  // @DtoUpdateOptional
  email     String     @unique @db.VarChar(255)
  // @DtoUpdateOptional
  password  String     @db.VarChar(255)
  // @DtoUpdateOptional
  status    UserStatus @default(ACTIVE)
  // @DtoUpdateOptional
  role      Role       @default(USER)
  // @DtoReadOnly
  createdAt DateTime   @default(now())

  Reviews Review[]
}

model Restaurant {
  // @DtoReadOnly
  id          String           @id @default(uuid()) @db.Uuid()
  // @DtoUpdateOptional
  name        String           @db.VarChar(255)
  // @DtoUpdateOptional
  address     String           @db.VarChar(255)
  // @DtoUpdateOptional
  phone       String           @db.VarChar(255)
  // @DtoUpdateOptional
  description String           @db.Text
  // @DtoUpdateOptional
  status      RestaurantStatus @default(ACTIVE)
  // @DtoReadOnly
  createdAt   DateTime         @default(now())

  Reviews Review[]
}

model Review {
  // @DtoReadOnly
  id          String       @id @default(uuid()) @db.Uuid()
  rating      Int
  // @DtoUpdateOptional
  comment     String       @db.Text
  dateOfVisit DateTime     @db.Date
  // @DtoUpdateOptional
  status      ReviewStatus @default(PUBLISHED)
  // @DtoReadOnly
  createdAt   DateTime     @default(now())


  restaurantId String     @db.Uuid()
  userId       String     @db.Uuid()
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}
